package controller;

import model.GameTimeManager;
import view.UIChinh;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import util.ButtonManager;

public class KichBanNgay4 {

    private UIChinh mainUI;
    private GameTimeManager gameTimeManager;
    private Timer messageTimer;
    private int currentMessageIndex = 0;
    private boolean isKichBanActive = false;

    // C√°c message cho k·ªãch b·∫£n
    private final String[] GIAI_DOAN_1_MESSAGES = {
        "c·∫≠u nh√¢n vi√™n √† c√≥ th·ªÉ b√°n cho t√¥i m·ªôt th·ª© ko",
        "t√¥i s·ª£ l·∫Øm"
    };

    private final String[] GIAI_DOAN_2_MESSAGES = {
        "l·∫°nh l·∫Øm",
        "s·ª£ l·∫Øm",
        "c√¥ ƒë∆°n l·∫Øm",
        "ƒë√¢y l√† ƒë√¢u",
        "t·ªëi qua",
        "c·ª©u t√¥i",
        "c·ª©u t√¥i"
    };

    private final String[] GIAI_DOAN_3_MESSAGES = {
        "c·∫≠u ∆°i m·∫Øt t√¥i ƒë√¢u!?",
        "c·∫≠u c√≥ th·ªÉ b√°n m·∫Øt cho t√¥i kh√¥ng!?",
        "c·∫≠u ∆°i t√¥i kh√¥ng th·∫•y g√¨"
    };

    public KichBanNgay4(UIChinh mainUI, GameTimeManager gameTimeManager) {
        this.mainUI = mainUI;
        this.gameTimeManager = gameTimeManager;
    }

    public void kiemTraVaKichHoat() {
        int currentDay = getCurrentDayCount();
        System.out.println("DEBUG: Current day = " + currentDay);

        if (currentDay == 4 && !isKichBanActive) {
            System.out.println("DEBUG: Starting day 4 scenario at midnight!");
            batDauKichBan();
        }
    }

    private void ketThucKichBan() {
        // Hi·ªÉn th·ªã ·∫£nh 4.png
        hienThiAnh("4.png");

        // Th√¥ng b√°o nh·∫≠n ƒë∆∞·ª£c v·∫≠t ph·∫©m
        JOptionPane.showMessageDialog(mainUI, "???", "???", JOptionPane.INFORMATION_MESSAGE);
         JOptionPane.showMessageDialog(mainUI, "c·∫≠u ƒëang t√¨nh hu·ªëng kh√≥ x·ª≠ nh·ªâ? C·∫©m l·∫•y ƒëo·∫°n d·ªØ li·ªáu n√†y c√≥ l·∫Ω n√≥ s·∫Ω gi√∫p c·∫≠u", "???", JOptionPane.INFORMATION_MESSAGE);
        JOptionPane.showMessageDialog(mainUI, "B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c ƒë√¥i m·∫Øt c·ªßa qu·ª∑", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
         JOptionPane.showMessageDialog(mainUI, "c√≥ l·∫Ω t√¥i ch∆∞a gi·ªõi thi·ªáu, t√¥i t√™n l√† L·ª•c Thanh T·ªãnh (th·ªü d√†i) t·∫°m bi·ªát t√¥i kh√¥ng th·ªÉ ·ªü l√¢u", "???", JOptionPane.INFORMATION_MESSAGE);

        // Th√¥ng b√°o l·ªói
        JOptionPane.showMessageDialog(mainUI, "th·ª© n√†y l·∫Ω ra c·∫≠u kh√¥ng n√™n c√≥", "L·ªói", JOptionPane.ERROR_MESSAGE);

        // Kh√¥i ph·ª•c giao di·ªán
        khoiPhucGiaoDien();

        // üî• QUAN TR·ªåNG: KH√îNG g·ªçi endDaySequence() ·ªü ƒë√¢y n·ªØa
        // V√¨ k·ªãch b·∫£n ch·∫°y gi·ªØa ch·ª´ng, game v·∫´n ti·∫øp t·ª•c ƒë·∫øn 3h s√°ng
        isKichBanActive = false;

        // üî• TI·∫æP T·ª§C TH·ªúI GIAN GAME (n·∫øu ƒë√£ d·ª´ng)
        if (gameTimeManager != null && !gameTimeManager.isTimerRunning()) {
            gameTimeManager.startTimer();
        }
    }

    private int getCurrentDayCount() {
        try {
            // S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
            String projectPath = System.getProperty("user.dir");
            String countFilePath = Paths.get(projectPath, "database", "dialog", "count.txt").toString();

            BufferedReader reader = new BufferedReader(new FileReader(countFilePath));
            String line = reader.readLine();
            reader.close();
            return Integer.parseInt(line.trim());
        } catch (IOException | NumberFormatException e) {
            System.err.println("L·ªói ƒë·ªçc file count.txt: " + e.getMessage());
            return 0;
        }
    }

    private String getImagePath(String imageName) {
        // S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
        String projectPath = System.getProperty("user.dir");
        return Paths.get(projectPath, "database", "dialog", "level4", imageName).toString();
    }

    private void batDauKichBan() {
        isKichBanActive = true;

        // D·ª´ng th·ªùi gian game
        if (gameTimeManager != null) {
            gameTimeManager.stopTimer();
        }

        // Giai ƒëo·∫°n 1: Hi·ªÉn th·ªã ·∫£nh 1.png v√† message ƒë·∫ßu ti√™n
        hienThiAnh("1.png");
        hienThiMessageTheoThuTu(GIAI_DOAN_1_MESSAGES, this::batDauGiaiDoan2);
    }

    private void batDauGiaiDoan2() {
        // √Åp d·ª•ng filter ƒë·ªè
        applyRedFilter();

        // L√†m r·ªëi th√¥ng tin ng∆∞·ªùi ch∆°i
        lamRoiThongTinNguoiChoi();

        // Hi·ªÉn th·ªã ·∫£nh 2.png
        hienThiAnh("2.png");

        // Hi·ªÉn th·ªã c√°c message li√™n ti·∫øp
        hienThiMessageLienTuc(GIAI_DOAN_2_MESSAGES, this::batDauGiaiDoan3);
    }

    private void batDauGiaiDoan3() {
        // √Åp d·ª•ng filter x√°m
        applyGrayFilter();

        // Hi·ªÉn th·ªã ·∫£nh 3.png
        hienThiAnh("3.png");

        // Hi·ªÉn th·ªã messages giai ƒëo·∫°n 3
        hienThiMessageTheoThuTu(GIAI_DOAN_3_MESSAGES, this::ketThucKichBan);
    }

    private void hienThiAnh(String imageName) {
        SwingUtilities.invokeLater(() -> {
            try {
                String imagePath = getImagePath(imageName);
                ImageIcon originalIcon = new ImageIcon(imagePath);

                // üî• CH·ªàNH K√çCH TH∆Ø·ªöC ·∫¢NH NH·ªé L·∫†I
                int targetWidth = 230;  // Gi·∫£m t·ª´ 252 xu·ªëng 200
                int targetHeight = 270; // Gi·∫£m t·ª´ 301 xu·ªëng 250

                Image scaledImage = originalIcon.getImage()
                        .getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(scaledImage);

                if (mainUI != null && mainUI.getBtnAnh() != null) {
                    mainUI.getBtnAnh().setIcon(scaledIcon);

                    // üî• C·∫¨P NH·∫¨T L·∫†I K√çCH TH∆Ø·ªöC BUTTON
                    ButtonManager.fixButtonSize(mainUI.getBtnAnh(), targetWidth, targetHeight);
                }
            } catch (Exception e) {
                System.err.println("L·ªói t·∫£i ·∫£nh: " + e.getMessage());

                // üî• T·∫†O ·∫¢NH M·∫∂C ƒê·ªäNH NH·ªé H∆†N N·∫æU L·ªñI
                if (mainUI != null && mainUI.getBtnAnh() != null) {
                    ButtonManager.fixButtonSize(mainUI.getBtnAnh(), 200, 250);
                }
            }
        });
    }

    private void hienThiMessageTheoThuTu(String[] messages, Runnable onComplete) {
        currentMessageIndex = 0;

        messageTimer = new Timer(2000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (currentMessageIndex < messages.length) {
                    JOptionPane.showMessageDialog(mainUI, messages[currentMessageIndex], "C√¥ g@#$!?", JOptionPane.INFORMATION_MESSAGE);
                    currentMessageIndex++;
                } else {
                    messageTimer.stop();
                    onComplete.run();
                }
            }
        });
        messageTimer.start();
    }

    private void hienThiMessageLienTuc(String[] messages, Runnable onComplete) {
        currentMessageIndex = 0;

        messageTimer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (currentMessageIndex < messages.length) {
                    JOptionPane messageDialog = new JOptionPane(messages[currentMessageIndex], JOptionPane.INFORMATION_MESSAGE);
                    JDialog dialog = messageDialog.createDialog(mainUI, "Th√¥ng b√°o");
                    dialog.setVisible(true);

                    // T·ª± ƒë·ªông ƒë√≥ng sau 1 gi√¢y
                    Timer closeTimer = new Timer(1000, evt -> dialog.dispose());
                    closeTimer.setRepeats(false);
                    closeTimer.start();

                    currentMessageIndex++;
                } else {
                    messageTimer.stop();
                    onComplete.run();
                }
            }
        });
        messageTimer.start();
    }

    private void applyRedFilter() {
        SwingUtilities.invokeLater(() -> {
            if (mainUI != null) {
                mainUI.getContentPane().setBackground(Color.RED);
            }
        });
    }

    private void applyGrayFilter() {
        SwingUtilities.invokeLater(() -> {
            if (mainUI != null) {
                mainUI.getContentPane().setBackground(Color.DARK_GRAY);
            }
        });
    }

    private void lamRoiThongTinNguoiChoi() {
        SwingUtilities.invokeLater(() -> {
            if (mainUI != null) {
                // L√†m r·ªëi t√™n ng∆∞·ªùi ch∆°i
                if (mainUI.getJLabel2() != null) {
                    mainUI.getJLabel2().setText("!#@$@??");
                }

                // L√†m r·ªëi ƒëi·ªÉm tinh th·∫ßn
                if (mainUI.getJLabel8() != null) {
                    mainUI.getJLabel8().setText("####");
                }
            }
        });
    }

    private void khoiPhucGiaoDien() {
        SwingUtilities.invokeLater(() -> {
            if (mainUI != null) {
                // Kh√¥i ph·ª•c m√†u n·ªÅn
                mainUI.getContentPane().setBackground(null);

                // Kh√¥i ph·ª•c th√¥ng tin ng∆∞·ªùi ch∆°i
                mainUI.updateUI();
            }
        });
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ h·ªßy k·ªãch b·∫£n n·∫øu c·∫ßn
    public void huyKichBan() {
        if (messageTimer != null && messageTimer.isRunning()) {
            messageTimer.stop();
        }
        khoiPhucGiaoDien();
        isKichBanActive = false;
    }

    public boolean isKichBanActive() {
        return isKichBanActive;
    }
}
