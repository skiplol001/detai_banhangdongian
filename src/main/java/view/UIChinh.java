/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package view;

import java.awt.BorderLayout;
import model.KhachHang;
import model.QuanLyKhachHangService;
import util.TaiAnhGamePlay;
import util.TextFileStorage;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.OverlayLayout;
import javax.swing.SwingUtilities;
import model.GameTimeManager;
import util.SoundManager;

/**
 *
 * @author lap top
 */
public class UIChinh extends javax.swing.JFrame {

    private TextFileStorage.PlayerData playerData;
    private GameTimeManager gameTimeManager;
    private long gameStartTime;
    private final float TIME_SCALE = 0.1f;
    private QuanLyKhachHangService khachHangService;
    private KhachHang khachHangMoiTamThoi;
    private KichBanNgayDauTien kichBanNgayDau;

    public UIChinh() {
        initComponents();
        customizeUI();
        SoundManager.initialize();
        SoundManager.setMainUIReference(this);
        SoundManager.playBGM(); // Bắt đầu phát nhạc nền
        setupPanelBackground(jPanel1);
        // Thêm listener để dọn dẹp khi ứng dụng đóng
        SoundManager.addAppCloseListener(() -> {
            // Code dọn dẹp temp files hoặc resources khác
            System.out.println("Ứng dụng đang đóng, dọn dẹp tài nguyên...");
        });
        loadPlayerData(); // Phải gọi trước
        khachHangService = new QuanLyKhachHangService(playerData); // Gọi sau khi có playerData
        updateUI();
        initGameTimeManager();
        loadRandomImageToButton();

        Opening opening = new Opening(this);
        kichBanNgayDau = new KichBanNgayDauTien(this);
        int savedDayCount = KichBanNgayDauTien.getCurrentDayCount();
        opening.startOpeningSequence();
    }

    @Override
    protected void processWindowEvent(WindowEvent e) {
        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            // Dừng timer khi đóng ứng dụng
            if (gameTimeManager != null && gameTimeManager.isTimerRunning()) {
                gameTimeManager.stopTimer();
            }
            // Dọn dẹp SoundManager khi ứng dụng đóng
            SoundManager.cleanup();
        }
        super.processWindowEvent(e);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnAnh = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnTTKH = new javax.swing.JButton();
        btnKHTrongNgay = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnBan = new javax.swing.JButton();
        btnKhong = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("cửa hàng hoang");

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Tên:");

        jLabel2.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        jLabel2.setText("Player");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Thời gian:");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("00:00");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setText("Tiền:");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("0000");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(246, 246, 246)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addGap(206, 206, 206)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(23, 23, 23))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnAnh.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnAnh.setText("jButton2");
        btnAnh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnhActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton1.setText("CỬA HÀNG TIỆN LỢI");
        jButton1.setActionCommand("btnShop");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(241, 241, 241))
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnTTKH.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnTTKH.setText("Thông tin KH");
        btnTTKH.setToolTipText("");
        btnTTKH.setActionCommand("btnThongTinKH");
        btnTTKH.setMaximumSize(new java.awt.Dimension(270, 150));
        btnTTKH.setPreferredSize(new java.awt.Dimension(270, 150));
        btnTTKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTTKHActionPerformed(evt);
            }
        });

        btnKHTrongNgay.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnKHTrongNgay.setText("KH trong ngày");
        btnKHTrongNgay.setToolTipText("");
        btnKHTrongNgay.setActionCommand("btnKHTrongNgay");
        btnKHTrongNgay.setMaximumSize(new java.awt.Dimension(270, 150));
        btnKHTrongNgay.setName("btnKHTrongNgay"); // NOI18N
        btnKHTrongNgay.setPreferredSize(new java.awt.Dimension(270, 150));
        btnKHTrongNgay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKHTrongNgayActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Điểm Tinh Thần Hiện Tại");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setText("100");
        jLabel8.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 102, 0), null));

        btnBan.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnBan.setText("BÁN");
        btnBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBanActionPerformed(evt);
            }
        });

        btnKhong.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnKhong.setText("KHÔNG");
        btnKhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKhongActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnTTKH, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnBan, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(btnKhong, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 26, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(jLabel8))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jLabel7)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(btnKHTrongNgay, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnKhong, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBan, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnKHTrongNgay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btnTTKH, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnKhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKhongActionPerformed
        if (khachHangMoiTamThoi != null) {
            khachHangService.setKhachHangHienTai(khachHangMoiTamThoi);

            // SỬA DÒNG NÀY: thêm playerData.inventory
            boolean result = khachHangService.xuLyBanHang(false, playerData.inventory);
            if (result) {
                updateUI();
                // QUAN TRỌNG: Reset kích thước trước khi load ảnh mới
                fixButtonSize(btnAnh, 252, 301);

                loadRandomImageToButton();
                khachHangMoiTamThoi = null;

            }
            jPanel2.setPreferredSize(new Dimension(550, 600));
        }
    }//GEN-LAST:event_btnKhongActionPerformed

    private void btnBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBanActionPerformed
        if (khachHangMoiTamThoi != null) {
            khachHangService.setKhachHangHienTai(khachHangMoiTamThoi);

            if (!khachHangService.kiemTraCoTheBan(playerData.inventory)) {
                JOptionPane.showMessageDialog(this,
                        "Không thể bán! Bạn không có đủ vật phẩm mà khách hàng yêu cầu.",
                        "Không thể bán",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            boolean result = khachHangService.xuLyBanHang(true, playerData.inventory);
            if (result) {
                // CẬP NHẬT TIỀN NGAY LẬP TỨC
                loadPlayerData();
                updateUI();
                // QUAN TRỌNG: Reset kích thước trước khi load ảnh mới
                fixButtonSize(btnAnh, 252, 301);
                loadRandomImageToButton();
                khachHangMoiTamThoi = null;

                // PHÁT ÂM THANH THÀNH CÔNG
                SoundManager.playSuccessSound();
            }
        }
        jPanel2.setPreferredSize(new Dimension(550, 600));
    }//GEN-LAST:event_btnBanActionPerformed

    private void btnKHTrongNgayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKHTrongNgayActionPerformed
        try {
            SwingUtilities.invokeLater(() -> {
                UiKhachHang giaoDienKH = new UiKhachHang();
                giaoDienKH.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                giaoDienKH.setVisible(true);
            });
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi mở giao diện khách hàng: " + e.getMessage(),
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnKHTrongNgayActionPerformed

    private void btnTTKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTTKHActionPerformed
        if (khachHangMoiTamThoi != null) {
            // Cập nhật khách hàng hiện tại trong service
            khachHangService.setKhachHangHienTai(khachHangMoiTamThoi);

            // Lấy thông tin khách hàng kèm yêu cầu dựa trên inventory hiện tại
            String thongTin = khachHangMoiTamThoi.layThongTin();
            String yeuCau = khachHangService.layYeuCauKhachHangHienTai();

            // Kiểm tra xem người chơi có đủ vật phẩm không
            String trangThai = khachHangService.kiemTraDuVatPham(playerData.inventory);

            // Hiển thị thông tin đầy đủ
            String thongTinDayDu = thongTin + "\n\nYÊU CẦU: " + yeuCau + "\n\nTRẠNG THÁI: " + trangThai;

            JOptionPane.showMessageDialog(this, thongTinDayDu, "Thông Tin Khách Hàng", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Chưa có khách hàng nào!", "Lỗi", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnTTKHActionPerformed

    private void btnAnhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnhActionPerformed
        // Chỉ tạo khách hàng mới nếu không có khách hàng tạm thời nào đang chờ
        if (khachHangMoiTamThoi == null) {
            // Tạo khách hàng mới và gán vào biến tạm thời
            khachHangMoiTamThoi = khachHangService.taoKhachHangMoi();

            if (khachHangMoiTamThoi != null) {
                String yeuCau = khachHangMoiTamThoi.getTen() + " nói: " + khachHangService.layYeuCauKhachHangHienTai();

                // Hiển thị yêu cầu khách hàng qua JOptionPane
                JOptionPane.showMessageDialog(
                        this,
                        yeuCau,
                        "Khách hàng mới",
                        JOptionPane.INFORMATION_MESSAGE
                );

                // TẢI ẢNH THEO GIỚI TÍNH CỦA KHÁCH HÀNG
                loadRandomImageToButton();
            }
        } else {
            // Thông báo cho người dùng rằng có khách hàng đang chờ
            JOptionPane.showMessageDialog(this, "Có một khách hàng đang chờ rồi!", "Lỗi", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnAnhActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setEnabled(false);

        SwingUtilities.invokeLater(() -> {
            UiPhuBanHang shop = new UiPhuBanHang(() -> {
                SwingUtilities.invokeLater(() -> {
                    loadPlayerData();
                    updateUI();
                    UIChinh.this.setEnabled(true);
                    UIChinh.this.toFront();
                });
            });

            shop.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            shop.setVisible(true);
        });
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            new UIChinh().setVisible(true);
        });
    }

    private void loadPlayerData() {
        playerData = TextFileStorage.loadPlayerData();
        if (playerData.money <= 0) {
            playerData.money = 1000;
            playerData.mentalPoints = 100;
            playerData.inventory = new HashMap<>();
        }
    }

    private void updateUI() {
        jLabel6.setText(String.valueOf(playerData.money));
        jLabel8.setText(String.valueOf(playerData.mentalPoints));
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnh;
    private javax.swing.JButton btnBan;
    private javax.swing.JButton btnKHTrongNgay;
    private javax.swing.JButton btnKhong;
    private javax.swing.JButton btnTTKH;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

    private void customizeUI() {
        JPanel[] panels = {jPanel1, jPanel2, jPanel3, jPanel5};
        JLabel[] labels = {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8};
        JButton[] specialButtons = {btnKHTrongNgay, jButton1}; // Các nút màu đỏ máu
        JButton[] normalButtons = {btnTTKH, btnBan, btnKhong}; // Các nút màu xanh rêu
        fixButtonSize(btnAnh, 252, 301);
        // Sử dụng phiên bản simple theme để không thay đổi layout
        MaQuaiTheme.applySimpleTheme(this, panels, labels, specialButtons, normalButtons);

        // Thiết lập riêng các nút hình ảnh
        MaQuaiTheme.setupImageButtonForUI(btnKHTrongNgay, "btnKHTN");
        MaQuaiTheme.setupImageButtonForUI(btnTTKH, "btnTTKH");

        // Custom thêm nếu cần
        jLabel2.setFont(new Font("Dialog", Font.BOLD, 14));
        jLabel6.setFont(new Font("Dialog", Font.BOLD, 14));
        jLabel8.setFont(new Font("Dialog", Font.BOLD, 14));
        jLabel8.setForeground(new Color(140, 200, 140));

        // Đặt kích thước frame theo tỉ lệ 9:16
        this.setSize(800, 700);
        this.setPreferredSize(new Dimension(800, 700));
        this.setResizable(false);

        // Thiết lập riêng cho nút ảnh (btnAnh)
        btnAnh.setBorder(BorderFactory.createEmptyBorder());
        btnAnh.setContentAreaFilled(false);
        btnAnh.setFocusPainted(false);

    }

    private void fixButtonSize(JButton button, int width, int height) {
        button.setPreferredSize(new Dimension(width, height));
        button.setMinimumSize(new Dimension(width, height));
        button.setMaximumSize(new Dimension(width, height));
        button.setSize(new Dimension(width, height));
    }

    private void setupPanelBackground(JPanel panel) {
        // Đảm bảo panel có kích thước trước khi tải ảnh
        panel.setPreferredSize(new Dimension(700, 320));

        // Tải ảnh nền với kích thước phù hợp
        ImageIcon backgroundIcon = TaiAnhGamePlay.loadBackgroundImage(
                panel.getPreferredSize().width,
                panel.getPreferredSize().height
        );

        // Tạo JLabel chứa ảnh nền
        JLabel backgroundLabel = new JLabel(backgroundIcon);
        backgroundLabel.setBounds(0, 0, panel.getWidth(), panel.getHeight());

        // Xóa layout hiện tại và thiết lập layout mới
        panel.setLayout(new BorderLayout());

        // Thêm backgroundLabel vào panel
        panel.add(backgroundLabel, BorderLayout.CENTER);

        // Đảm bảo btnAnh hiển thị trên ảnh nền
        backgroundLabel.setLayout(new OverlayLayout(backgroundLabel));
        backgroundLabel.add(btnAnh);

        // Căn chỉnh btnAnh
        btnAnh.setAlignmentX(0.5f);
        btnAnh.setAlignmentY(0.5f);
    }

    private void loadRandomImageToButton() {
        try {
            ImageIcon randomIcon;

            if (khachHangMoiTamThoi != null) {
                String gioiTinh = khachHangMoiTamThoi.getGioiTinh();
                randomIcon = TaiAnhGamePlay.loadImageByGender(
                        gioiTinh,
                        btnAnh.getWidth(),
                        btnAnh.getHeight());
            } else {
                randomIcon = TaiAnhGamePlay.loadRandomImage(
                        btnAnh.getWidth(),
                        btnAnh.getHeight());
            }

            if (randomIcon != null) {
                fixButtonSize(btnAnh, 252, 301);
                btnAnh.setIcon(randomIcon);

                btnAnh.revalidate();
                btnAnh.repaint();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void initGameTimeManager() {
        gameTimeManager = new GameTimeManager();

        // Thiết lập listener để cập nhật UI khi thời gian thay đổi
        gameTimeManager.setUpdateListener(new GameTimeManager.TimeUpdateListener() {
            @Override
            public void onTimeUpdate(String timeString, int currentHour, boolean isNight) {
                SwingUtilities.invokeLater(() -> {
                    jLabel4.setText(timeString);
                    // Có thể thêm hiệu ứng đêm nếu cần
                    if (isNight) {
                        // Áp dụng hiệu ứng đêm cho UI
                    }
                });
            }
        });
        gameTimeManager.setDayEndListener(new GameTimeManager.DayEndListener() {
            @Override
            public void onDayEnd() {
                SwingUtilities.invokeLater(() -> {
                    endDaySequence();
                });
            }
        });

        // Bắt đầu đếm thời gian
        gameTimeManager.startTimer();
    }

    private void endDaySequence() {
        // Hiển thị thông báo kết thúc ngày
        JOptionPane.showMessageDialog(this,
                "Đã hết ngày! Cửa hàng đóng cửa.",
                "Kết thúc ngày",
                JOptionPane.INFORMATION_MESSAGE);
        TextFileStorage.savePlayerData(playerData);

        // Hiển thị bảng tổng kết ngày
        showDaySummary();

        // 🔥 SỬA QUAN TRỌNG: KIỂM TRA VÀ CHẠY KỊCH BẢN TRƯỚC KHI CẬP NHẬT SỐ NGÀY
        kichBanNgayDau.startKichBan();

        // 🔥 Sau khi chạy kịch bản (nếu có), mới cập nhật số ngày tiếp theo
        int currentDay = gameTimeManager.getCurrentDay();
        KichBanNgayDauTien.updateDayCount(currentDay + 1); // Cập nhật cho ngày tiếp theo

        // Chuẩn bị cho ngày mới
        prepareForNewDay();
    }

    private void showDaySummary() {
        JOptionPane.showMessageDialog(this,
                "Tổng kết ngày:\n"
                + "Doanh thu: " + calculateDailyRevenue() + "\n"
                + "Điểm tinh thần: " + playerData.mentalPoints,
                "Tổng kết ngày",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void prepareForNewDay() {
        gameTimeManager.restartTimer();
        updateUI();
    }

    private int calculateDailyRevenue() {
        return 0;
    }

    public void tamDungTimer() {
        if (gameTimeManager != null && gameTimeManager.isTimerRunning()) {
            gameTimeManager.stopTimer();
        }
    }

    public void tiepTucTimer() {
        if (gameTimeManager != null && !gameTimeManager.isTimerRunning()) {
            gameTimeManager.startTimer();
        }
    }
}
